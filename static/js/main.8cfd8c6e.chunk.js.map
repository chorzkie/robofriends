{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","Actions.js","Constants.js","serviceWorker.js","Reducers.js","index.js"],"names":["Card","props","id","name","username","email","className","alt","src","CardList","Robots","map","robot","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","searchedRobots","filter","toLowerCase","includes","searchField","isPending","onSearchChange","onRequestRobots","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","stateStore","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","store","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8cfd8c6e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    const {id, name, username, email} = props;\r\n    return (\r\n        <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${name}?100x100`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>Username: {username}</p>\r\n                <p>ID number: {id}</p>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({Robots}) => {\r\n    if (false) {\r\n        throw new Error('Meh...');\r\n    }\r\n\r\n    return (\r\n    <div>\r\n       {\r\n        Robots.map(robot => {\r\n        return (\r\n                <Card \r\n                    id={robot.id} \r\n                    name={robot.name} \r\n                    username={robot.username} \r\n                    email={robot.email}/>\r\n                );\r\n            })\r\n        }\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange})=> {\r\n    return (\r\n        <div className='tc pa2'>\r\n            <input \r\n            className='pa3 ba b--blue bg-lightest-blue'\r\n            type='search' \r\n            placeholder='Search Robots' \r\n            onChange = {searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style= {{overflow: 'scroll', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError){\r\n            return (\r\n                <div>\r\n                    <h1 className= 'tc'>Well, this is embarrassing...</h1>\r\n                </div>\r\n            );\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { setSearchField, requestRobots } from '../Actions'\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        Robots: state.requestRobots.Robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n        //onRequestRobots: () => requestRobots(dispatch)\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    // constructor() {\r\n    //     super();\r\n    //     this.state = {\r\n    //         Robots: [],\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n\r\n        const searchedRobots = this.props.Robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\r\n        })\r\n\r\n        if (this.props.isPending) {\r\n            return (\r\n                <div className='tc f1'>\r\n                    <h1>Loading...</h1>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    <SearchBox searchChange={this.props.onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList Robots={searchedRobots} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots()\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n} from './Constants'\r\n\r\nexport const setSearchField = (text) => (dispatch) => {\r\n    dispatch({\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    })\r\n}\r\n\r\n// export const setSearchField = (text) => ({\r\n//     type: CHANGE_SEARCH_FIELD,\r\n//     payload: text\r\n// })\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({\r\n            type: REQUEST_ROBOTS_SUCCESS,\r\n            payload: data\r\n        }))\r\n        .catch(err => dispatch({\r\n            type: REQUEST_ROBOTS_FAILED,\r\n            payload: err\r\n        }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n} from './Constants'\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: '',\r\n    Robots: [],\r\n    error: '',\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { Robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './Reducers';\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\n\n\nconst logger = createLogger()\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\nconst stateStore = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n//const stateStore = createStore(searchRobots, applyMiddleware(logger))\n\nReactDOM.render( \n                <Provider store={stateStore}>\n                    <App /> \n                </Provider>, \n                document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}